import requests
import string
import functools
import re
from mrjob.job import MRJob

class MRValenceCalculator(MRJob):

    def load_valence_scores(self, url):
        # Load valence scores from the given URL
        response = requests.get(url)
        return {word: int(score) for line in response.text.splitlines() for word, score in [line.split('\t')]}

    def decode_bytes(self, input_data):
        return input_data.decode('utf-8', errors='replace') if isinstance(input_data, bytes) else input_data

    def get_word_valences(self, words, valence_scores):
        return list(map(lambda word: valence_scores.get(word.lower(), 0), words))

    def clean_text(self, text):
        # Clean the input text (you may modify this based on your cleaning requirements)
        text = text.translate(str.maketrans('', '', string.punctuation))
        return text.strip().lower()

    def calc_valence(self, input_data):
        url = 'https://raw.githubusercontent.com/fnielsen/afinn/master/afinn/data/AFINN-en-165.txt'
        valence_scores = self.load_valence_scores(url)
        
        decoded_text = self.decode_bytes(input_data)

        # Remove non-printable characters from the decoded text
        decoded_text = re.sub(r'[\x00-\x1F\x7F]', '', decoded_text)
        
        cleaned_text = self.clean_text(decoded_text)
        
        words = cleaned_text.split()
        word_valences = self.get_word_valences(words, valence_scores)

        # Calculate total valence using reduce
        total_valence, valid_count = functools.reduce(
            lambda acc, val: (acc[0] + val, acc[1] + (1 if val != 0 else 0)),
            word_valences,
            (0, 0)
        )
        
        return total_valence

    def mapper(self, _, line):
        valence_score = self.calc_valence(line)
        yield 'president', valence_score

if __name__ == '__main__':
    MRValenceCalculator.run()
